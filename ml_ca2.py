# -*- coding: utf-8 -*-
"""ML_CA2.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nbz7IwjcKJfCytvhWFU0gBzFXZ5FQYrI

Subject: Machine Learning CA2

*   Name: Arpita Jana
*   Roll no: 9128
*   Class: TYCS/ A
*   Project Guide: Prof. Sanjana Bhangale

Dataset: https://www.kaggle.com/datasets/rabieelkharoua/predict-liver-disease-1700-records-dataset

#Data Preprocessing
"""

import pandas as pd
df=pd.read_csv("Liver_disease_data.csv")

df.shape

df.columns

df.head()

df.tail()

data=df.head(1000)
data.shape

data.tail()

data.info()

data.describe()

data.isnull().sum()

data.duplicated().sum()

data['Diagnosis'].value_counts()

data.corr()

# Grouping by Diagnosis (1: Diagnosed, 0: Not Diagnosed)
print("Mean Statistics Grouped by Diagnosis (1: Diagnosed, 0: Not Diagnosed):")
data.groupby('Diagnosis').mean()

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.preprocessing import StandardScaler, LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.linear_model import LogisticRegression
from sklearn.metrics import accuracy_score, confusion_matrix, classification_report

label_encoder = LabelEncoder()
data['GeneticRisk'] = label_encoder.fit_transform(data['GeneticRisk'])
data['Smoking'] = label_encoder.fit_transform(data['Smoking'])

data.info()

plt.figure(figsize=(10, 6))
correlation_matrix = data[['Age', 'BMI', 'LiverFunctionTest', 'AlcoholConsumption', 'PhysicalActivity', 'GeneticRisk', 'Smoking']].corr()
sns.heatmap(correlation_matrix, annot=True, cmap='coolwarm', fmt='.2f', linewidths=0.5)
plt.title('Correlation Heatmap of Features')
plt.show()

"""#EDA
1. What is the average age of individuals with and without a diagnosis?Calculate the average "Age" for individuals with a diagnosis (Diagnosis = 1) and without a diagnosis (Diagnosis = 0).
"""

average_age = data.groupby('Diagnosis')['Age'].mean()
print("Average Age of Individuals with and without a Diagnosis:")
print(average_age)

"""
2. What is the distribution of BMI among individuals with and without a diagnosis?Analyze the distribution of "BMI" for individuals who have been diagnosed (Diagnosis = 1) versus those who have not (Diagnosis = 0)."""

# Descriptive statistics for BMI by Diagnosis
bmi_stats = data.groupby('Diagnosis')['BMI'].describe()
print("Descriptive Statistics for BMI by Diagnosis:")
print(bmi_stats)

"""3. What is the correlation between Alcohol Consumption and Smoking?
Calculate the correlation coefficient between "AlcoholConsumption" and "Smoking" to understand if there is a relationship between these two factors.
"""

# Calculate the correlation coefficient
correlation = data['AlcoholConsumption'].corr(data['Smoking'])
print(f"The correlation coefficient between Alcohol Consumption and Smoking is: {correlation:.2f}")

"""4. Is there a relationship between Physical Activity levels and Diagnosis?
Investigate whether there is a relationship between the "PhysicalActivity" score and whether or not the person has been diagnosed with a condition (Diagnosis = 1 or 0).
"""

# Calculate average Physical Activity for each diagnosis group
avg_physical_activity = data.groupby('Diagnosis')['PhysicalActivity'].mean()
print("Average Physical Activity Levels:")
print(avg_physical_activity)

"""5. Does Genetic Risk have an impact on Diabetes or Hypertension status?
Analyze if "GeneticRisk" correlates with the presence of Diabetes (Diabetes = 1) or Hypertension (Hypertension = 1).
"""

# Calculate mean GeneticRisk for Diabetes and Hypertension groups
mean_genetic_risk_diabetes = data.groupby('Diabetes')['GeneticRisk'].mean()
mean_genetic_risk_hypertension = data.groupby('Hypertension')['GeneticRisk'].mean()
# Output mean values
print("Mean Genetic Risk for Diabetes groups:")
print(mean_genetic_risk_diabetes)
print("\nMean Genetic Risk for Hypertension groups:")
print(mean_genetic_risk_hypertension)

# Perform t-tests
from scipy.stats import ttest_ind
t_test_diabetes = ttest_ind(
    data[data['Diabetes'] == 1]['GeneticRisk'],
    data[data['Diabetes'] == 0]['GeneticRisk']
)
t_test_hypertension = ttest_ind(
    data[data['Hypertension'] == 1]['GeneticRisk'],
    data[data['Hypertension'] == 0]['GeneticRisk']
)
# Print T-test results
print("\nT-Test Results for Genetic Risk and Diabetes:")
print(f"T-Statistic: {t_test_diabetes.statistic}, P-Value: {t_test_diabetes.pvalue}")
print("\nT-Test Results for Genetic Risk and Hypertension:")
print(f"T-Statistic: {t_test_hypertension.statistic}, P-Value: {t_test_hypertension.pvalue}")

"""6. How does age impact the likelihood of having a diagnosis?
Perform a statistical test or calculate the odds ratio to see how age influences the likelihood of being diagnosed (Diagnosis = 1).
"""

import statsmodels.api as sm
import numpy as np
# Prepare data for logistic regression
X = data[['Age']]  # Predictor: Age
X = sm.add_constant(X)  # Add intercept
y = data['Diagnosis']  # Target: Diagnosis
# Fit logistic regression model
logit_model = sm.Logit(y, X).fit()
# Display summary
print(logit_model.summary())
# Calculate odds ratio
odds_ratio = np.exp(logit_model.params)
print("\nOdds Ratio for Age:")
print(odds_ratio)
# Interpretation: Check p-value
p_value = logit_model.pvalues['Age']
if p_value < 0.05:
    print("\nAge is significantly associated with the likelihood of having a diagnosis (p-value < 0.05).")
else:
    print("\nAge is NOT significantly associated with the likelihood of having a diagnosis (p-value >= 0.05).")

"""7. What is the average Liver Function Test score for individuals with and without a diagnosis?
Compare the average "LiverFunctionTest" score for individuals with a diagnosis versus those without.
"""

# Calculate the average Liver Function Test score for each Diagnosis group
average_lft_by_diagnosis = data.groupby('Diagnosis')['LiverFunctionTest'].mean()
# Display the result
print("Average Liver Function Test score for individuals with and without a diagnosis:")
print(average_lft_by_diagnosis)

"""8. What is the relationship between Alcohol Consumption and Liver Function Test scores?
Investigate the correlation between "AlcoholConsumption" and "LiverFunctionTest" to determine if alcohol consumption has an effect on liver health.
"""

# Calculate the correlation between Alcohol Consumption and Liver Function Test scores
correlation = data['AlcoholConsumption'].corr(data['LiverFunctionTest'])

# Display the result
print(f"The correlation coefficient between Alcohol Consumption and Liver Function Test scores is: {correlation:.2f}")

"""9. How does the prevalence of Hypertension and Diabetes vary with Age?
Analyze the prevalence of Hypertension and Diabetes based on age groups (e.g., under 40, 40-60, and over 60).
"""

# Define age group conditions
under_40 = data['Age'] < 40
between_40_60 = (data['Age'] >= 40) & (data['Age'] <= 60)
over_60 = data['Age'] > 60

# Calculate prevalence of Hypertension and Diabetes in each age group
hypertension_under_40 = data.loc[under_40, 'Hypertension'].mean() * 100
hypertension_40_60 = data.loc[between_40_60, 'Hypertension'].mean() * 100
hypertension_over_60 = data.loc[over_60, 'Hypertension'].mean() * 100

diabetes_under_40 = data.loc[under_40, 'Diabetes'].mean() * 100
diabetes_40_60 = data.loc[between_40_60, 'Diabetes'].mean() * 100
diabetes_over_60 = data.loc[over_60, 'Diabetes'].mean() * 100

# Print results
print("Hypertension Prevalence by Age Group (%):")
print(f"Under 40: {hypertension_under_40:.2f}%")
print(f"40-60: {hypertension_40_60:.2f}%")
print(f"Over 60: {hypertension_over_60:.2f}%")

print("\nDiabetes Prevalence by Age Group (%):")
print(f"Under 40: {diabetes_under_40:.2f}%")
print(f"40-60: {diabetes_40_60:.2f}%")
print(f"Over 60: {diabetes_over_60:.2f}%")

"""10. What percentage of individuals with high BMI (e.g., BMI > 30) have a diagnosis?
Calculate the percentage of individuals with a BMI greater than 30 who have been diagnosed (Diagnosis = 1).
"""

high_bmi_data = data[data['BMI'] > 30]
# Calculate the percentage of individuals with Diagnosis = 1
high_bmi_diagnosis_percentage = (high_bmi_data['Diagnosis'].mean()) * 100

# Print the result
print(f"Percentage of individuals with BMI > 30 who have a diagnosis: {high_bmi_diagnosis_percentage:.2f}%")

"""#Data Visualization

1. What is the distribution of BMI across different age groups?
Create a histogram or box plot of BMI across different age groups (e.g., under 40, 40-60, and over 60) to identify trends in body mass by age.
"""

# Define age groups
bins = [0, 40, 60, 100]
labels = ['Under 40', '40-60', 'Over 60']
# Plotting Box Plot for BMI across Age Groups
plt.figure(figsize=(10, 6))
sns.boxplot(x=pd.cut(data['Age'], bins=bins, labels=labels, right=False), y=data['BMI'], palette='Set2')
plt.title('Distribution of BMI Across Different Age Groups')
plt.xlabel('Age Group')
plt.ylabel('BMI')
plt.show()

"""2. How does Alcohol Consumption vary with Smoking status?
Create a scatter plot or bar chart to visualize how "AlcoholConsumption" varies based on "Smoking" status (e.g., 0 or 1).
"""

plt.figure(figsize=(8, 6))
sns.stripplot(x='Smoking', y='AlcoholConsumption',hue='Smoking', data=data, jitter=True, palette='coolwarm')
plt.title('Alcohol Consumption Distribution by Smoking Status')
plt.xlabel('Smoking Status (0 = Non-Smoker, 1 = Smoker)')
plt.ylabel('Alcohol Consumption')
plt.show()

"""3. What is the relationship between Age and Liver Function Test scores?
Create a scatter plot to explore the relationship between "Age" and "LiverFunctionTest" to see if liver function worsens with age.
"""

plt.figure(figsize=(10, 6))
sns.scatterplot(x='Age', y='LiverFunctionTest', data=data, color='blue', s=100, alpha=0.7)
plt.title('Relationship Between Age and Liver Function Test Scores')
plt.xlabel('Age')
plt.ylabel('Liver Function Test Score')
plt.show()

"""4. How does Physical Activity vary between individuals with and without a diagnosis?
Create a bar chart to compare the "PhysicalActivity" score between individuals with a diagnosis (Diagnosis = 1) and those without (Diagnosis = 0).
"""

plt.figure(figsize=(8, 6))
sns.barplot(x='Diagnosis', y='PhysicalActivity',hue='Diagnosis', data=data, palette='Set2')
plt.title('Physical Activity vs Diagnosis (With/Without Liver Disease)', fontsize=15)
plt.xlabel('Diagnosis (0 = No, 1 = Yes)', fontsize=12)
plt.ylabel('Physical Activity Score', fontsize=12)
plt.xticks(ticks=[0, 1], labels=['Without Diagnosis', 'With Diagnosis'])

"""5. What is the distribution of Genetic Risk for individuals with and without a diagnosis?
Create side-by-side box plots to compare the distribution of "GeneticRisk" for diagnosed and non-diagnosed individuals.
"""

plt.figure(figsize=(8, 6))
sns.boxplot(x='Diagnosis', y='GeneticRisk',hue='Diagnosis', data=data, palette='Set3')
plt.title('Distribution of Genetic Risk by Diagnosis (With/Without Liver Disease)', fontsize=16)
plt.xlabel('Diagnosis (0 = No, 1 = Yes)', fontsize=12)
plt.ylabel('Genetic Risk Score', fontsize=12)
plt.xticks(ticks=[0, 1], labels=['Without Diagnosis', 'With Diagnosis'])

"""6. What is the percentage of individuals with high Alcohol Consumption who have a diagnosis?
Create a pie chart or bar chart to show the percentage of individuals with high Alcohol Consumption (e.g., AlcoholConsumption > 10) who have been diagnosed.
"""

high_alcohol = data[data['AlcoholConsumption'] > 10]
# Calculate the percentage of individuals with high alcohol consumption who have a diagnosis
diagnosis_percentage = high_alcohol['Diagnosis'].value_counts(normalize=True) * 100
# plotting pie chart
plt.figure(figsize=(6, 6))
explode = (0, 0.1)
plt.pie(diagnosis_percentage, labels=['No Diagnosis (0)', 'Diagnosis (1)'], autopct='%1.1f%%', colors=['lightblue', 'salmon'],explode=explode)
plt.title('Percentage of Individuals with High Alcohol Consumption Who Have a Diagnosis', fontsize=10)
plt.show()

"""7. How does the Liver Function Test score vary with Age?
Create a line graph or scatter plot to visualize the variation in "LiverFunctionTest" scores with age.
"""

# Define custom age bins for grouping
bins = [0, 30, 40, 50, 60, 70, 80, 100]  # Customize as per your data
labels = ['0-30', '30-40', '40-50', '50-60', '60-70', '70-80', '80+']
age_group_avg = data.groupby(pd.cut(data['Age'], bins=bins, labels=labels, right=True))['LiverFunctionTest'].mean()
# Create a line graph
plt.figure(figsize=(8, 6))
age_group_avg.plot(kind='line', marker='o', color='purple')
plt.title('Average Liver Function Test Scores by Age Group', fontsize=14)
plt.xlabel('Age Group', fontsize=12)
plt.ylabel('Average Liver Function Test Score', fontsize=12)
plt.grid(True)
plt.xticks(rotation=45)
plt.show()

"""8. What is the relationship between BMI and Diagnosis status?
Create a box plot or scatter plot to compare the "BMI" distribution between individuals with and without a diagnosis.
"""

plt.figure(figsize=(8, 6))
sns.boxplot(x='Diagnosis', y='BMI',hue='Diagnosis', data=data, palette='Set2')
plt.title('BMI Distribution for Diagnosed vs Non-Diagnosed Individuals', fontsize=14)
plt.xlabel('Diagnosis Status (0: No, 1: Yes)', fontsize=12)
plt.ylabel('BMI', fontsize=12)
plt.xticks([0, 1], ['No Diagnosis', 'Diagnosis'], rotation=0)
plt.show()

"""9. What is the distribution of Smoking across different age groups?
Create a bar chart or pie chart to visualize the distribution of "Smoking" status (0 or 1) across different age groups (e.g., under 40, 40-60, over 60).
"""

bins = [0, 40, 60, 100]
labels = ['Under 40', '40-60', 'Over 60']
sns.countplot(x=pd.cut(data['Age'], bins=bins, labels=labels, right=False), hue='Smoking', data=data, palette='Set3')
plt.title('Distribution of Smoking Status Across Age Groups', fontsize=14)
plt.xlabel('Age Groups', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.legend(title='Smoking', labels=['Non-smoker (0)', 'Smoker (1)'])
plt.show()

"""10. How do individuals with high Physical Activity levels compare to others regarding the likelihood of a diagnosis?
Create a bar chart or stacked bar chart comparing "PhysicalActivity" levels with diagnosis rates (Diagnosis = 1 vs. Diagnosis = 0).
"""

high_activity_threshold = data['PhysicalActivity'].median()
# Create a new column categorizing individuals as High or Low activity based on the threshold
data['ActivityLevel'] = ['High' if activity > high_activity_threshold else 'Low' for activity in data['PhysicalActivity']]
# Create a stacked bar chart comparing Physical Activity levels with Diagnosis rates
activity_diagnosis = pd.crosstab(data['ActivityLevel'], data['Diagnosis'])

# Plot the stacked bar chart
activity_diagnosis.plot(kind='bar', stacked=True, color=['lightcoral', 'lightgreen'], figsize=(10,6))
plt.title('Comparison of Physical Activity Levels with Diagnosis Rates', fontsize=14)
plt.xlabel('Physical Activity Level', fontsize=12)
plt.ylabel('Count', fontsize=12)
plt.xticks(rotation=0)
plt.legend(title='Diagnosis Status', labels=['No Diagnosis (0)', 'Diagnosis (1)'])
plt.show()

"""#Model Building

"""

X = data.drop(columns=['Diagnosis','ActivityLevel'])
y = data['Diagnosis']

# Split the data into training (70%) and testing (30%) sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)

# Scale the data
scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_test_scaled = scaler.transform(X_test)

model = LogisticRegression()
model.fit(X_train_scaled, y_train)

# Prediction and Evaluation
y_pred = model.predict(X_test_scaled)
y_pred

"""#Model Evaluation"""

# Confusion Matrix
conf_matrix = confusion_matrix(y_test, y_pred)
print("Confusion Matrix:")
print(conf_matrix)

# Plot Confusion Matrix as Heatmap
plt.figure(figsize=(6, 5))
sns.heatmap(conf_matrix, annot=True, fmt="d", cmap="Blues", xticklabels=["No Diagnosis", "Diagnosis"], yticklabels=["No Diagnosis", "Diagnosis"])
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()

# Accuracy
accuracy = accuracy_score(y_test, y_pred)*100
print(f'Accuracy: {accuracy:.2f}')

# Precision Score
from sklearn.metrics import precision_score
precision = precision_score(y_test, y_pred)*100
print(f"Precision: {precision:.2f}")

#Recall Score
from sklearn.metrics import recall_score
recall = recall_score(y_test, y_pred)*100
print(f"Recall: {recall:.2f}")

from sklearn.metrics import precision_recall_curve
from sklearn.metrics import average_precision_score
# Precision-Recall Curve
precision, recall, thresholds = precision_recall_curve(y_test, model.predict_proba(X_test)[:, 1])
average_precision = average_precision_score(y_test, model.predict_proba(X_test)[:, 1])
# Precision-Recall Curve
plt.figure(figsize=(6, 5))
plt.plot(recall, precision, color='green', label=f'Precision-Recall curve (AP = {average_precision:.2f})')
plt.xlabel('Recall')
plt.ylabel('Precision')
plt.title('Precision-Recall Curve')
plt.legend(loc='upper right')
plt.show()

# F1 Score
from sklearn.metrics import f1_score
f1 = f1_score(y_test, y_pred)
print(f"F1-Score: {f1:.2f}")

# Classification Report
from sklearn.metrics import classification_report
print("Classification Report:")
print(classification_report(y_test, y_pred))

coefficients = pd.DataFrame({
    'Feature': X_train.columns,
    'Coefficient': model.coef_[0]
})
print(coefficients)